{"version":3,"sources":["../src/WordViewComponent.js"],"names":["WordViewComponent","constructor","allCharacters","index","language","alphabet","split","spanOpen","spanActive","spanHidden","spanCloseTag","hiddenSymbol","createFlossListener","name","bind","action","addEventRender","getCurGroup","curLang","curCharacter","upperCase","toUpperCase","curGroup","groups","filter","g","indexOf","_createNewGroup","toLowerCase","str","i","rand","_chooseRandomCharFromString","every","e","_randomSortStr","charAt","Math","floor","random","length","compareRandom","a","b","arr","sort","join","openChar","callback","render","html"],"mappings":"AAAA;;;;;;;AACA;;AACA;;;;AAEe,MAAMA,iBAAN,CAAwB;AAEnC;AACA;AACA;AACA;AACA;AAEAC,EAAAA,WAAW,CAAEC,aAAa,GAAG,EAAlB,EAAsBC,KAAK,GAAG,CAA9B,EAAiCC,QAAQ,GAAG,SAA5C,EAAuD;AAC9D;AACA,SAAKC,QAAL,GAAgBA,wBAAhB;;AACA,QAAI,OAAOH,aAAP,KAAyB,QAA7B,EAAsC;AAClC,WAAKA,aAAL,GAAqBA,aAAa,CAACI,KAAd,CAAoB,EAApB,CAArB;AACH,KAFD,MAEM,IAAG,OAAOJ,aAAP,KAAyB,QAA5B,EAAqC;AACvC,WAAKA,aAAL,GAAqBA,aAArB;AACH,KAFK,MAEA;AACF,WAAKA,aAAL,GAAqB,EAArB;AACH;;AACD,SAAKC,KAAL,GAAaA,KAAK,IAAI,CAAT,GAAaA,KAAb,GAAqB,CAAlC;AACA,SAAKC,QAAL,GAAgB,KAAKC,QAAL,CAAcD,QAAd,IAA0BA,QAA1B,GAAqC,SAArD;AAEA,SAAKG,QAAL,GAAgB,6BAAhB;AACA,SAAKC,UAAL,GAAkB,4BAAlB;AACA,SAAKC,UAAL,GAAkB,4BAAlB;AACA,SAAKC,YAAL,GAAoB,SAApB;AACA,SAAKC,YAAL,GAAoB,GAApB,CAjB8D,CAmB9D;AACH;;AAEDC,EAAAA,mBAAmB,GAAE;AACjB,wBAAM;AACFC,MAAAA,IAAI,EAAE,OADJ;AAEFC,MAAAA,IAAI,EAAE,IAFJ;AAGFC,MAAAA,MAAM,EAAE,KAAKC;AAHX,KAAN;AAMH;;AAEDC,EAAAA,WAAW,GAAG;AACV;AACA,QAAIC,OAAO,GAAG,KAAKb,QAAL,CAAc,KAAKD,QAAnB,CAAd;AACA,QAAIe,YAAY,GAAG,KAAKjB,aAAL,CAAmB,KAAKC,KAAxB,CAAnB;;AACA,QAAI,CAACe,OAAD,IAAY,CAACC,YAAjB,EAA8B;AAC1B,aAAO,KAAP;AACH;;AACD,QAAIC,SAAS,GAAGD,YAAY,KAAKA,YAAY,CAACE,WAAb,EAAjC;AACA,QAAIC,QAAQ,GAAGJ,OAAO,CAACK,MAAR,CAAeC,MAAf,CAAsBC,CAAC,IAAE;AACpC,aAAOA,CAAC,CAACJ,WAAF,GAAgBK,OAAhB,CAAwBP,YAAY,CAACE,WAAb,EAAxB,MAAwD,CAAC,CAAhE;AACH,KAFc,EAEZ,CAFY,CAAf;;AAGA,QAAI,CAACC,QAAL,EAAc;AACVA,MAAAA,QAAQ,GAAG,KAAKK,eAAL,CAAqBT,OAAO,CAACb,QAA7B,EAAuCc,YAAvC,CAAX;AACH;;AACD,WAAOC,SAAS,GAAGE,QAAQ,CAACD,WAAT,EAAH,GAA4BC,QAAQ,CAACM,WAAT,EAA5C;AACH;;AAEDD,EAAAA,eAAe,CAACE,GAAD,EAAMV,YAAN,EAAmB;AAC9B,QAAIG,QAAQ,GAAGH,YAAf;;AACA,SAAK,IAAIW,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,CAApB,GAAuB;AACnB,UAAIC,IAAI,GAAG,KAAKC,2BAAL,CAAiCH,GAAjC,CAAX;;AACA,UAAIP,QAAQ,CAAChB,KAAT,CAAe,EAAf,EAAmB2B,KAAnB,CAAyBC,CAAC,IAAEA,CAAC,CAACb,WAAF,OAAoBU,IAAI,CAACV,WAAL,EAAhD,CAAJ,EAAwE;AACpEC,QAAAA,QAAQ,IAAIS,IAAZ;AACAD,QAAAA,CAAC;AACJ;AACJ;;AACD,WAAO,KAAKK,cAAL,CAAoBb,QAApB,CAAP;AACH;;AAEDU,EAAAA,2BAA2B,CAACH,GAAD,EAAK;AAC5B,WAAOA,GAAG,CAACO,MAAJ,CAAWC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAcV,GAAG,CAACW,MAA7B,CAAX,CAAP;AACH;;AAEDL,EAAAA,cAAc,CAACN,GAAD,EAAK;AACf,aAASY,aAAT,CAAuBC,CAAvB,EAAyBC,CAAzB,EAA2B;AACvB,aAAON,IAAI,CAACE,MAAL,KAAgB,GAAvB;AACH;;AACD,QAAIK,GAAG,GAAGf,GAAG,CAACvB,KAAJ,CAAU,EAAV,CAAV;AACAsC,IAAAA,GAAG,CAACC,IAAJ,CAASJ,aAAT;AACA,WAAOG,GAAG,CAACE,IAAJ,CAAS,EAAT,CAAP;AACH;;AAEDC,EAAAA,QAAQ,GAAG;AACP,QAAI,KAAK7C,aAAL,CAAmB,KAAKC,KAAxB,CAAJ,EAAoC;AAChC,WAAKA,KAAL;;AACA,UAAI,KAAKA,KAAL,IAAc,KAAKD,aAAL,CAAmBsC,MAArC,EAA6C;AACzC,eAAO,CAAP;AACH;;AACD,aAAO,KAAKvB,WAAL,EAAP;AACH;;AACD,WAAO,CAAP;AACH;;AAEDD,EAAAA,cAAc,CAACgC,QAAD,EAAU;AACpBA,IAAAA,QAAQ;AACX;;AAEDC,EAAAA,MAAM,GAAE;AACJ,QAAIC,IAAI,GAAG,EAAX;;AACA,SAAK,IAAIpB,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAG,KAAK5B,aAAL,CAAmBsC,MAArC,EAA6CV,CAAC,EAA9C,EAAiD;AAC7C,UAAIA,CAAC,GAAC,KAAK3B,KAAX,EAAiB;AACb+C,QAAAA,IAAI,IAAE,KAAK3C,QAAL,GAAc,KAAKL,aAAL,CAAmB4B,CAAnB,CAAd,GAAoC,KAAKpB,YAA/C;AACH,OAFD,MAEM,IAAIoB,CAAC,IAAE,KAAK3B,KAAZ,EAAkB;AACpB+C,QAAAA,IAAI,IAAE,KAAK1C,UAAL,GAAgB,KAAKG,YAArB,GAAkC,KAAKD,YAA7C;AACH,OAFK,MAEA,IAAIoB,CAAC,GAAC,KAAK3B,KAAX,EAAiB;AACnB+C,QAAAA,IAAI,IAAE,KAAKzC,UAAL,GAAgB,KAAKE,YAArB,GAAkC,KAAKD,YAA7C;AACH;AACJ;;AACD,WAAOwC,IAAP;AACH;;AA5GkC","sourcesContent":["'use strict';\nimport {FLOSS} from \"floss-js\"\nimport alphabet from '../assets/chars-accordance.json'\n\nexport default class WordViewComponent {\n\n    // allCharacters\n    // index\n    // alphabet\n    // groups\n    // language \n    \n    constructor( allCharacters = [], index = 0, language = 'english') {\n        // set props, set alphabet using language\n        this.alphabet = alphabet;\n        if (typeof allCharacters === 'string'){\n            this.allCharacters = allCharacters.split('');\n        }else if(typeof allCharacters === 'object'){\n            this.allCharacters = allCharacters;\n        }else {\n            this.allCharacters = [];\n        }\n        this.index = index >= 0 ? index : 0;\n        this.language = this.alphabet[language] ? language : 'english';\n\n        this.spanOpen = '<span class=\"char visible\">';\n        this.spanActive = '<span class=\"char active\">';\n        this.spanHidden = '<span class=\"char hidden\">';\n        this.spanCloseTag = '</span>';\n        this.hiddenSymbol = 'â€¢';\n\n        // this.createFlossListener();\n    }\n\n    createFlossListener(){\n        FLOSS({\n            name: 'index',\n            bind: this,\n            action: this.addEventRender\n\n        })\n    }\n\n    getCurGroup() {\n        // return find group, that contains current character\n        let curLang = this.alphabet[this.language];\n        let curCharacter = this.allCharacters[this.index];\n        if (!curLang || !curCharacter){\n            return false\n        }\n        let upperCase = curCharacter === curCharacter.toUpperCase();\n        let curGroup = curLang.groups.filter(g=>{\n            return g.toUpperCase().indexOf(curCharacter.toUpperCase()) !== -1\n        })[0];\n        if (!curGroup){\n            curGroup = this._createNewGroup(curLang.alphabet, curCharacter);\n        }\n        return upperCase ? curGroup.toUpperCase() : curGroup.toLowerCase();\n    }\n    \n    _createNewGroup(str, curCharacter){\n        let curGroup = curCharacter;\n        for (let i = 0; i < 3;){\n            let rand = this._chooseRandomCharFromString(str);\n            if (curGroup.split('').every(e=>e.toUpperCase() !== rand.toUpperCase())){\n                curGroup += rand;\n                i++;\n            }\n        }\n        return this._randomSortStr(curGroup);\n    }\n\n    _chooseRandomCharFromString(str){\n        return str.charAt(Math.floor(Math.random()*str.length));\n    }\n\n    _randomSortStr(str){\n        function compareRandom(a,b){\n            return Math.random() - 0.5;\n        }\n        let arr = str.split('');\n        arr.sort(compareRandom);\n        return arr.join('');\n    }\n\n    openChar() {\n        if (this.allCharacters[this.index]) {\n            this.index++;\n            if (this.index >= this.allCharacters.length) {\n                return 1;\n            }\n            return this.getCurGroup();\n        }\n        return 0;\n    }\n\n    addEventRender(callback){\n        callback();\n    }\n\n    render(){\n        let html = '';\n        for (let i=0; i < this.allCharacters.length; i++){\n            if (i<this.index){\n                html+=this.spanOpen+this.allCharacters[i]+this.spanCloseTag;\n            }else if (i==this.index){\n                html+=this.spanActive+this.hiddenSymbol+this.spanCloseTag;\n            }else if (i>this.index){\n                html+=this.spanHidden+this.hiddenSymbol+this.spanCloseTag;\n            }\n        }\n        return html;\n    }\n}"],"file":"WordViewComponent.js"}